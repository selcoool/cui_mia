#include <WiFi.h>
#include <WebSocketsServer.h>

#define LED_PIN 8  // GPIO8: LED b√°o tr·∫°ng th√°i client

const char* ssid = "ESP32-AP";
const char* password = "12345678";

WebSocketsServer webSocket = WebSocketsServer(81);

bool clientConnected = false;
unsigned long lastDataTime = 0;
const unsigned long timeoutNoData = 5000;  // 5 gi√¢y kh√¥ng nh·∫≠n d·ªØ li·ªáu

void webSocketEvent(uint8_t client_num, WStype_t type, uint8_t * payload, size_t length) {
  switch (type) {
    case WStype_CONNECTED:
      Serial.printf("üîå Client %u connected from %s\n", client_num, webSocket.remoteIP(client_num).toString().c_str());
      clientConnected = true;
      lastDataTime = millis();
      digitalWrite(LED_PIN, HIGH); // B·∫≠t LED ngay khi c√≥ k·∫øt n·ªëi
      break;

    case WStype_TEXT:
      Serial.printf("üì© Received from client %u: %s\n", client_num, payload);
      lastDataTime = millis(); // C·∫≠p nh·∫≠t th·ªùi gian nh·∫≠n d·ªØ li·ªáu cu·ªëi
      digitalWrite(LED_PIN, HIGH); // Gi·ªØ LED b·∫≠t s√°ng khi nh·∫≠n d·ªØ li·ªáu
      break;

    case WStype_DISCONNECTED:
      Serial.printf("‚ùå Client %u disconnected\n", client_num);
      clientConnected = false;
      digitalWrite(LED_PIN, LOW); // T·∫Øt LED khi m·∫•t k·∫øt n·ªëi
      break;

    default:
      break;
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  WiFi.softAP(ssid, password);
  delay(1000);

  Serial.println("‚úÖ WiFi AP started");
  Serial.print("üì° IP address: ");
  Serial.println(WiFi.softAPIP());

  webSocket.begin();
  webSocket.onEvent(webSocketEvent);
  Serial.println("üñ•Ô∏è WebSocket server started on port 81");
}

void loop() {
  webSocket.loop();

  if (clientConnected) {
    if (millis() - lastDataTime > timeoutNoData) {
      // Kh√¥ng nh·∫≠n d·ªØ li·ªáu trong 5 gi√¢y => t·∫Øt LED, coi nh∆∞ m·∫•t t√≠n hi·ªáu
      Serial.println("‚ö†Ô∏è Kh√¥ng nh·∫≠n d·ªØ li·ªáu t·ª´ client trong 5 gi√¢y. T·∫Øt LED.");
      clientConnected = false;
      digitalWrite(LED_PIN, LOW);
    }
  }
}
