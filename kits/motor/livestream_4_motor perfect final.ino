#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>
#include "esp_camera.h"


#define ENA 12      // Ch√¢n PWM ƒëi·ªÅu khi·ªÉn t·ªëc ƒë·ªô ƒë·ªông c∆°
#define IN1 13     // Ch√¢n ƒëi·ªÅu khi·ªÉn ƒë·ªông c∆° 1
#define IN2 15     // Ch√¢n ƒëi·ªÅu khi·ªÉn ƒë·ªông c∆° 1
#define IN3 14     // Ch√¢n ƒëi·ªÅu khi·ªÉn ƒë·ªông c∆° 2
#define IN4 2     // Ch√¢n ƒëi·ªÅu khi·ªÉn ƒë·ªông c∆° 2
#define POT_PIN 34 // Ch√¢n ƒë·ªçc gi√° tr·ªã t·ª´ Potentiometer


#define PWM_CHANNEL 0  // K√™nh PWM
#define PWM_FREQ 5000  // T·∫ßn s·ªë PWM (Hz)
#define PWM_RESOLUTION 8  // ƒê·ªô ph√¢n gi·∫£i (8-bit, gi√° tr·ªã t·ª´ 0-255)


#define FORWARD "upBtn"
#define FORBACK "downBtn"
#define LEFT "leftBtn"
#define RIGHT "rightBtn"
#define STOP "stopBtn"



// *C·∫•u h√¨nh Access Point*
const char* ssid = "ESP32-CAM";
const char* password = "12345678";

// *Kh·ªüi t·∫°o server*
WebServer server(80);
WebSocketsServer webSocket(3001);

// *Khai b√°o tr∆∞·ªõc h√†m x·ª≠ l√Ω s·ª± ki·ªán WebSocket*
void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length);

// *C·∫•u h√¨nh camera*
camera_config_t config;


// *Giao di·ªán HTML*
const char htmlPage[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ESP32-CAM Control</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        h1 {
            color: #333;
        }
        #videoStream {
            width: 300px;
            height: 290px;
            border: 2px solid #333;
            margin-bottom: 20px;
        }

        /* ƒêi·ªÅu h∆∞·ªõng */
        .controls {
            position: relative;
            width: 150px;
            height: 150px;
            margin: 20px auto;
        }
        .controls button {
            position: absolute;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            border: none;
            background-color: #007BFF;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .controls button:active {
            background-color: #0056b3;
        }

        /* N√∫t D·ª´ng (Trung t√¢m) */
        #stop {
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: red;
        }

        /* N√∫t xung quanh */
        #up {
            top: 0;
            left: 50%;
            transform: translateX(-50%);
        }
        #down {
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
        }
        #left {
            left: 0;
            top: 50%;
            transform: translateY(-50%);
        }
        #right {
            right: 0;
            top: 50%;
            transform: translateY(-50%);
        }

        /* Slider t·ªëc ƒë·ªô */
        .slider-container {
            margin-top: 20px;
        }
        input[type="range"] {
            width: 50%;
        }
        #speedValue {
            font-weight: bold;
            color: #007BFF;
        }
    </style>
</head>
<body>

    <img id="videoStream" src="" alt="ƒêang t·∫£i video...">

    <!-- ƒêi·ªÅu h∆∞·ªõng -->
    <div class="controls">
        <button id="up">‚¨ÜÔ∏è</button>
        <button id="left">‚¨ÖÔ∏è</button>
        <button id="stop">‚èπ</button>
        <button id="right">‚û°Ô∏è</button>
        <button id="down">‚¨áÔ∏è</button>
    </div>

    <button id="captureBtn">üì∏ Ch·ª•p ·∫¢nh</button>
    <button id="toggleLightBtn">üí° B·∫≠t/T·∫Øt ƒê√®n</button>

    <div class="slider-container">
        <p>üöÄ T·ªëc ƒë·ªô: <span id="speedValue">50</span></p>
        <input type="range" id="speedSlider" min="0" max="100" value="50">
    </div>

    <script>
        const videoStream = document.getElementById("videoStream");
        const buttons = document.querySelectorAll(".controls button");
        const captureBtn = document.getElementById("captureBtn");
        const toggleLightBtn = document.getElementById("toggleLightBtn");
        const speedSlider = document.getElementById("speedSlider");
        const speedValue = document.getElementById("speedValue");

        // K·∫øt n·ªëi WebSocket v·ªõi ESP32-CAM
        const socket = new WebSocket("ws://" + "192.168.4.1" + ":3001");

        socket.onopen = () => console.log("üîó K·∫øt n·ªëi WebSocket th√†nh c√¥ng!");
        socket.onerror = (error) => console.error("‚ùå L·ªói WebSocket:", error);
        socket.onclose = () => console.warn("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi WebSocket!");

        // Nh·∫≠n d·ªØ li·ªáu h√¨nh ·∫£nh t·ª´ ESP32-CAM
        socket.onmessage = (event) => {
            if (event.data === "button_pressed") {
                console.log("‚úÖ ESP32-CAM ƒë√£ nh·∫≠n ƒë∆∞·ª£c l·ªánh!");
            } else {
                const blob = new Blob([event.data], { type: "image/jpeg" });
                videoStream.src = URL.createObjectURL(blob);
            }
        };

        // X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t ƒëi·ªÅu h∆∞·ªõng
        buttons.forEach(btn => {
            btn.onclick = () => {
                if (socket.readyState === WebSocket.OPEN) {
                    socket.send(btn.id);
                    console.log(`üì© ƒê√£ g·ª≠i l·ªánh: ${btn.id}`);
                } else {
                    console.warn("‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi!");
                }
            };
        });

        // X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t ch·ª•p ·∫£nh
        captureBtn.onclick = () => {
            if (socket.readyState === WebSocket.OPEN) {
                socket.send("capture");
                console.log("üì∏ Ch·ª•p ·∫£nh!");
            }
        };

        // X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t b·∫≠t/t·∫Øt ƒë√®n
        toggleLightBtn.onclick = () => {
            if (socket.readyState === WebSocket.OPEN) {
                socket.send("toggle_light");
                console.log("üí° B·∫≠t/T·∫Øt ƒë√®n!");
            }
        };

        // X·ª≠ l√Ω thay ƒë·ªïi t·ªëc ƒë·ªô
        speedSlider.addEventListener("input", () => {
            speedValue.textContent = speedSlider.value;
        });

        speedSlider.addEventListener("change", () => {
            if (socket.readyState === WebSocket.OPEN) {
                socket.send(`speed:${speedSlider.value}`);
                console.log(`üöÄ ƒê√£ g·ª≠i t·ªëc ƒë·ªô: ${speedSlider.value}`);
            }
        });
    </script>

</body>
</html>
)rawliteral";






void setup() {
  Serial.begin(115200);
  Serial.println("\nESP32-CAM WebSocket Server (AP Mode)");

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(POT_PIN, INPUT);

  // C·∫•u h√¨nh PWM cho ch√¢n ENA
  ledcSetup(PWM_CHANNEL, PWM_FREQ, PWM_RESOLUTION);
  ledcAttachPin(ENA, PWM_CHANNEL);

  // *Kh·ªüi t·∫°o Access Point*
  WiFi.softAP(ssid, password);
  Serial.println("‚úÖ Access Point ƒë√£ kh·ªüi ƒë·ªông!");
  Serial.print("üì∂ ƒê·ªãa ch·ªâ IP: ");
  Serial.println(WiFi.softAPIP());

  // *C·∫•u h√¨nh camera*
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = 5;
  config.pin_d1 = 18;
  config.pin_d2 = 19;
  config.pin_d3 = 21;
  config.pin_d4 = 36;
  config.pin_d5 = 39;
  config.pin_d6 = 34;
  config.pin_d7 = 35;
  config.pin_xclk = 0;
  config.pin_pclk = 22;
  config.pin_vsync = 25;
  config.pin_href = 23;
  config.pin_sscb_sda = 26;
  config.pin_sscb_scl = 27;
  config.pin_pwdn = 32;
  config.pin_reset = -1;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  config.frame_size = FRAMESIZE_SVGA;
  config.jpeg_quality = 15;
  config.fb_count = 2;

  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.println("‚ùå L·ªói: Kh√¥ng th·ªÉ kh·ªüi t·∫°o camera!");
    return;
  }

   sensor_t *s = esp_camera_sensor_get();
if (s != nullptr) {
  s->set_hmirror(s, 1); // L·∫≠t ngang
  s->set_vflip(s, 1);   // L·∫≠t d·ªçc
  Serial.println("Camera flipped successfully!");
} else {
  Serial.println("Failed to access camera sensor!");
}

  // *G·ª≠i giao di·ªán HTML khi truy c·∫≠p ƒë·ªãa ch·ªâ IP*
  server.on("/", HTTP_GET, []() {
    server.send(200, "text/html", htmlPage);
  });

  // *Kh·ªüi ƒë·ªông WebSocket server*
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);

  // *Kh·ªüi ƒë·ªông Web Server*
  server.begin();
}

void loop() {
  server.handleClient();
  webSocket.loop();

  // *Ch·ª•p ·∫£nh t·ª´ camera*
  camera_fb_t *fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("‚ùå Kh√¥ng th·ªÉ ch·ª•p ·∫£nh t·ª´ camera!");
    return;
  }

  // *G·ª≠i ·∫£nh ƒë·∫øn t·∫•t c·∫£ client WebSocket*
  webSocket.broadcastBIN(fb->buf, fb->len);
  // Serial.println("üì§ ƒê√£ g·ª≠i ·∫£nh t·ªõi t·∫•t c·∫£ client!");

  // *Gi·∫£i ph√≥ng b·ªô nh·ªõ*
  esp_camera_fb_return(fb);
}



void moveCar(const char* motorDirection) {  // ƒê·ªïi t·ª´ char -> const char*
  Serial.print("Di chuy·ªÉn: ");
  Serial.println(motorDirection);

  if (strcmp(motorDirection, FORWARD) == 0) {  // So s√°nh chu·ªói b·∫±ng strcmp
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
     Serial.println("FORWARD");
  } else if (strcmp(motorDirection, FORBACK) == 0) {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    Serial.println("FORBACK");
  } else if (strcmp(motorDirection, LEFT) == 0) {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    Serial.println("LEFT");
  } else if (strcmp(motorDirection, RIGHT) == 0) {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
   Serial.println("RIGHT");
  } else if (strcmp(motorDirection, STOP) == 0) {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
       Serial.println(STOP);
  } else {
    Serial.println("‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá");
  }
}






// *X·ª≠ l√Ω s·ª± ki·ªán WebSocket*
void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length) {
    switch (type) {
        case WStype_CONNECTED:
            Serial.printf("üîó Client %u ƒë√£ k·∫øt n·ªëi!\n", num);
            webSocket.sendTXT(num, "Xin ch√†o t·ª´ ESP32-CAM!");
            break;

        case WStype_DISCONNECTED:
            Serial.printf("‚ùå Client %u ƒë√£ ng·∫Øt k·∫øt n·ªëi!\n", num);
            break;

        case WStype_TEXT: {
            std::string command = std::string((char *)payload);
            Serial.printf("üì© Nh·∫≠n l·ªánh: %s\n", command.c_str());

            if (command == "upBtn") {
                moveCar("up");
            } else if (command == "downBtn") {
                moveCar("downBtn");
            } else if (command == "leftBtn") {
                moveCar("leftBtn");
            } else if (command == "rightBtn") {
                moveCar("rightBtn");
            } else if (command == "stopBtn") {
                moveCar("stopBtn");
            } else if (command == "capture") {  
                // capturePhoto();  // G·ªçi h√†m ch·ª•p ·∫£nh
                // webSocket.sendTXT(num, "Photo Captured");
                 Serial.println("capture");
            } else if (command == "toggleLight") {
              Serial.println("toggleLight");
                // toggleLight();  // G·ªçi h√†m b·∫≠t/t·∫Øt ƒë√®n
                // webSocket.sendTXT(num, "Light Toggled");
            } else if (command.rfind("speed:", 0) == 0) {  // Ki·ªÉm tra n·∫øu chu·ªói b·∫Øt ƒë·∫ßu b·∫±ng "speed:"
                int speed = std::stoi(command.substr(6));  // L·∫•y gi√° tr·ªã sau "speed:"
                // setSpeed(speed);

               Serial.println("speed:");
                webSocket.sendTXT(num, ("Speed Set: " + std::to_string(speed)).c_str());
            }

            webSocket.sendTXT(num, "button_pressed");
            break;
        }

        default:
            break;
    }
}


